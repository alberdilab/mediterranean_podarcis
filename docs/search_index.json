[["index.html", "AlberdiLab | Manuscript in prep Mediterranean podarcis metagenomics Chapter 1 Introduction 1.1 Prepare the R environment", " AlberdiLab | Manuscript in prep Mediterranean podarcis metagenomics Antton Alberdi1 2024-06-21 Chapter 1 Introduction 1.1 Prepare the R environment 1.1.1 Environment To reproduce all the analyses locally, clone this repository in your computer using: RStudio &gt; New Project &gt; Version Control &gt; Git And indicating the following git repository: https://github.com/alberdilab/mediterranean_podarcis.git Once the R project has been created, follow the instructions and code chunks shown in this webbook. 1.1.2 Libraries The following R packages are required for the data analysis. # Base library(R.utils) library(knitr) library(tidyverse) library(devtools) library(tinytable) library(rairtable) # For tree handling library(ape) library(phyloseq) library(phytools) # For plotting library(ggplot2) library(ggrepel) library(ggpubr) library(ggnewscale) library(gridExtra) library(ggtreeExtra) library(ggtree) library(ggh4x) # For statistics library(spaa) library(vegan) library(Rtsne) library(geiger) library(hilldiv2) library(distillR) library(broom.mixed) #library(lmerTest) library(Hmsc) library(corrplot) University of Copenhagen, antton.alberdi@sund.ku.dk↩︎ "],["data-preparation.html", "Chapter 2 Data preparation 2.1 Podarcis filfolensis (PF) 2.2 Podarcis gaigeae (PG) 2.3 Podarcis milensis (PM) 2.4 Podarcis pityusensis (PP) 2.5 All", " Chapter 2 Data preparation 2.1 Podarcis filfolensis (PF) 2.1.0.1 Sample metadata sample_metadata_pf &lt;- read_tsv(&quot;data/pf/DMB0159_metadata.tsv.gz&quot;) %&gt;% rename(sample=1) 2.1.0.2 Genome metadata genome_metadata_pf &lt;- read_tsv(&quot;data/pf/DMB0159_mag_info.tsv.gz&quot;) %&gt;% rename(length=mag_size) 2.1.0.3 Read counts read_counts_pf &lt;- read_tsv(&quot;data/pf/DMB0159_counts.tsv.gz&quot;) %&gt;% rename(genome=1) %&gt;% select(all_of(c(&quot;genome&quot;,sample_metadata_pf$sample))) %&gt;% # sort samples arrange(match(genome,genome_metadata_pf$genome)) # sort genomes 2.1.0.4 Genome base hits genome_coverage_pf &lt;- read_tsv(&quot;data/pf/DMB0159_coverage.tsv.gz&quot;) %&gt;% rename(genome=1) %&gt;% select(all_of(c(&quot;genome&quot;,sample_metadata_pf$sample))) %&gt;% # sort samples arrange(match(genome,genome_metadata_pf$genome)) # sort genomes 2.1.0.5 Genome tree genome_tree_pf &lt;- read_tree(&quot;data/pf/DMB0159.tree&quot;) genome_tree_pf$tip.label &lt;- str_replace_all(genome_tree_pf$tip.label,&quot;&#39;&quot;, &quot;&quot;) #remove single quotes in MAG names genome_tree_pf &lt;- keep.tip(genome_tree_pf, tip=genome_metadata_pf$genome) # keep only MAG tips 2.1.0.6 Genome annotations Downloading individual annotation files from ERDA using information in Airtable and writing them to a single compressed table takes a while. The following chunk only needs to be run once, to generate the genome_annotations table that is saved in the data directory. Note that the airtable connection requires a personal access token. airtable(&quot;MAGs&quot;, &quot;appWbHBNLE6iAsMRV&quot;) %&gt;% #get base ID from Airtable browser URL read_airtable(., fields = c(&quot;ID&quot;,&quot;mag_name&quot;,&quot;number_genes&quot;,&quot;anno_url&quot;), id_to_col = TRUE) %&gt;% #get 3 columns from MAGs table filter(mag_name %in% paste0(genome_metadata_pf$genome,&quot;.fa&quot;)) %&gt;% #filter by MAG name filter(number_genes &gt; 0) %&gt;% #genes need to exist select(anno_url) %&gt;% #list MAG annotation urls pull() %&gt;% read_tsv() %&gt;% #load all tables rename(gene=1, genome=2, contig=3) %&gt;% #rename first 3 columns write_tsv(file=&quot;data/pf/genome_annotations.tsv.xz&quot;) #write to overall compressed file genome_annotations_pf &lt;- read_tsv(&quot;data/pf/genome_annotations.tsv.xz&quot;) %&gt;% rename(gene=1, genome=2, contig=3) 2.1.0.7 Create working objects Transform the original data files into working objects for downstream analyses. 2.1.0.8 Filter reads by coverage min_coverage=0.3 read_counts_filt_pf &lt;- genome_coverage_pf %&gt;% mutate(across(where(is.numeric), ~ ifelse(. &gt; min_coverage, 1, 0))) %&gt;% mutate(across(-1, ~ . * read_counts_pf[[cur_column()]])) 2.1.0.9 Transform reads into genome counts readlength=150 genome_counts_pf &lt;- read_counts_pf %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata_pf$length / readlength) )) readlength=150 genome_counts_filt_pf &lt;- read_counts_filt_pf %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata_pf$length / readlength) )) 2.1.0.10 Distill annotations into GIFTs genome_gifts_pf &lt;- distill(genome_annotations_pf,GIFT_db,genomecol=2,annotcol=c(9,10,19), verbosity=F) 2.1.0.11 Prepare color scheme AlberdiLab projects use unified color schemes developed for the Earth Hologenome Initiative, to facilitate figure interpretation. phylum_colors_pf &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata_pf, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree_pf$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% pull(colors, name=phylum) 2.1.0.12 Wrap working objects All working objects are wrapped into a single Rdata object to facilitate downstream usage. save(sample_metadata_pf, genome_metadata_pf, read_counts_pf, genome_counts_pf, genome_counts_filt_pf, genome_tree_pf, genome_gifts_pf, phylum_colors_pf, file = &quot;data/data_podarcis_filfolensis.Rdata&quot;) 2.2 Podarcis gaigeae (PG) 2.2.0.1 Sample metadata sample_metadata_pg &lt;- read_tsv(&quot;data/pg/DMB0160_metadata.tsv.gz&quot;) %&gt;% rename(sample=1) 2.2.0.2 Genome metadata genome_metadata_pg &lt;- read_tsv(&quot;data/pg/DMB0160_mag_info.tsv.gz&quot;) %&gt;% rename(length=mag_size) 2.2.0.3 Read counts read_counts_pg &lt;- read_tsv(&quot;data/pg/DMB0160_counts.tsv.gz&quot;) %&gt;% rename(genome=1) %&gt;% select(all_of(c(&quot;genome&quot;,sample_metadata_pg$sample))) %&gt;% # sort samples arrange(match(genome,genome_metadata_pg$genome)) # sort genomes 2.2.0.4 Genome base hits genome_coverage_pg &lt;- read_tsv(&quot;data/pg/DMB0160_coverage.tsv.gz&quot;) %&gt;% rename(genome=1) %&gt;% select(all_of(c(&quot;genome&quot;,sample_metadata_pg$sample))) %&gt;% # sort samples arrange(match(genome,genome_metadata_pg$genome)) # sort genomes 2.2.0.5 Genome tree genome_tree_pg &lt;- read_tree(&quot;data/pg/DMB0160.tree&quot;) genome_tree_pg$tip.label &lt;- str_replace_all(genome_tree_pg$tip.label,&quot;&#39;&quot;, &quot;&quot;) #remove single quotes in MAG names genome_tree_pg &lt;- keep.tip(genome_tree_pg, tip=genome_metadata_pg$genome) # keep only MAG tips 2.2.0.6 Genome annotations Downloading individual annotation files from ERDA using information in Airtable and writing them to a single compressed table takes a while. The following chunk only needs to be run once, to generate the genome_annotations table that is saved in the data directory. Note that the airtable connection requires a personal access token. airtable(&quot;MAGs&quot;, &quot;appWbHBNLE6iAsMRV&quot;) %&gt;% #get base ID from Airtable browser URL read_airtable(., fields = c(&quot;ID&quot;,&quot;mag_name&quot;,&quot;number_genes&quot;,&quot;anno_url&quot;), id_to_col = TRUE) %&gt;% #get 3 columns from MAGs table filter(mag_name %in% paste0(genome_metadata_pg$genome,&quot;.fa&quot;)) %&gt;% #filter by MAG name filter(number_genes &gt; 0) %&gt;% #genes need to exist select(anno_url) %&gt;% #list MAG annotation urls pull() %&gt;% read_tsv() %&gt;% #load all tables rename(gene=1, genome=2, contig=3) %&gt;% #rename first 3 columns write_tsv(file=&quot;data/pg/genome_annotations.tsv.xz&quot;) #write to overall compressed file genome_annotations_pg &lt;- read_tsv(&quot;data/pg/genome_annotations.tsv.xz&quot;) %&gt;% rename(gene=1, genome=2, contig=3) 2.2.0.7 Create working objects Transform the original data files into working objects for downstream analyses. 2.2.0.8 Filter reads by coverage min_coverage=0.3 read_counts_filt_pg &lt;- genome_coverage_pg %&gt;% mutate(across(where(is.numeric), ~ ifelse(. &gt; min_coverage, 1, 0))) %&gt;% mutate(across(-1, ~ . * read_counts_pg[[cur_column()]])) 2.2.0.9 Transform reads into genome counts readlength=150 genome_counts_pg &lt;- read_counts_pg %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata_pg$length / readlength) )) readlength=150 genome_counts_filt_pg &lt;- read_counts_filt_pg %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata_pg$length / readlength) )) 2.2.0.10 Distill annotations into GIFTs genome_gifts_pg &lt;- distill(genome_annotations_pg,GIFT_db,genomecol=2,annotcol=c(9,10,19), verbosity=F) 2.2.0.11 Prepare color scheme AlberdiLab projects use unified color schemes developed for the Earth Hologenome Initiative, to facilitate figure interpretation. phylum_colors_pg &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata_pg, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree_pg$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% pull(colors, name=phylum) 2.2.0.12 Wrap working objects All working objects are wrapped into a single Rdata object to facilitate downstream usage. save(sample_metadata_pg, genome_metadata_pg, read_counts_pg, genome_counts_pg, genome_counts_filt_pg, genome_tree_pg, genome_gifts_pg, phylum_colors_pg, file = &quot;data/data_podarcis_gaigeae.Rdata&quot;) 2.3 Podarcis milensis (PM) 2.3.0.1 Sample metadata sample_metadata_pm &lt;- read_tsv(&quot;data/pm/DMB0158_metadata.tsv.gz&quot;) %&gt;% rename(sample=1) 2.3.0.2 Genome metadata genome_metadata_pm &lt;- read_tsv(&quot;data/pm/DMB0158_mag_info.tsv.gz&quot;) %&gt;% rename(length=mag_size) 2.3.0.3 Read counts read_counts_pm &lt;- read_tsv(&quot;data/pm/DMB0158_counts.tsv.gz&quot;) %&gt;% rename(genome=1) %&gt;% select(all_of(c(&quot;genome&quot;,sample_metadata_pm$sample))) %&gt;% # sort samples arrange(match(genome,genome_metadata_pm$genome)) # sort genomes 2.3.0.4 Genome base hits genome_coverage_pm &lt;- read_tsv(&quot;data/pm/DMB0158_coverage.tsv.gz&quot;) %&gt;% rename(genome=1) %&gt;% select(all_of(c(&quot;genome&quot;,sample_metadata_pm$sample))) %&gt;% # sort samples arrange(match(genome,genome_metadata_pm$genome)) # sort genomes 2.3.0.5 Genome tree genome_tree_pm &lt;- read_tree(&quot;data/pm/DMB0158.tree&quot;) genome_tree_pm$tip.label &lt;- str_replace_all(genome_tree_pm$tip.label,&quot;&#39;&quot;, &quot;&quot;) #remove single quotes in MAG names genome_tree_pm &lt;- keep.tip(genome_tree_pm, tip=genome_metadata_pm$genome) # keep only MAG tips 2.3.0.6 Genome annotations Downloading individual annotation files from ERDA using information in Airtable and writing them to a single compressed table takes a while. The following chunk only needs to be run once, to generate the genome_annotations table that is saved in the data directory. Note that the airtable connection requires a personal access token. airtable(&quot;MAGs&quot;, &quot;appWbHBNLE6iAsMRV&quot;) %&gt;% #get base ID from Airtable browser URL read_airtable(., fields = c(&quot;ID&quot;,&quot;mag_name&quot;,&quot;number_genes&quot;,&quot;anno_url&quot;), id_to_col = TRUE) %&gt;% #get 3 columns from MAGs table filter(mag_name %in% paste0(genome_metadata_pm$genome,&quot;.fa&quot;)) %&gt;% #filter by MAG name filter(number_genes &gt; 0) %&gt;% #genes need to exist select(anno_url) %&gt;% #list MAG annotation urls pull() %&gt;% read_tsv() %&gt;% #load all tables rename(gene=1, genome=2, contig=3) %&gt;% #rename first 3 columns write_tsv(file=&quot;data/pm/genome_annotations.tsv.xz&quot;) #write to overall compressed file genome_annotations_pm &lt;- read_tsv(&quot;data/pm/genome_annotations.tsv.xz&quot;) %&gt;% rename(gene=1, genome=2, contig=3) 2.3.0.7 Create working objects Transform the original data files into working objects for downstream analyses. 2.3.0.8 Filter reads by coverage min_coverage=0.3 read_counts_filt_pm &lt;- genome_coverage_pm %&gt;% mutate(across(where(is.numeric), ~ ifelse(. &gt; min_coverage, 1, 0))) %&gt;% mutate(across(-1, ~ . * read_counts_pm[[cur_column()]])) 2.3.0.9 Transform reads into genome counts readlength=150 genome_counts_pm &lt;- read_counts_pm %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata_pm$length / readlength) )) readlength=150 genome_counts_filt_pm &lt;- read_counts_filt_pm %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata_pm$length / readlength) )) 2.3.0.10 Distill annotations into GIFTs genome_gifts_pm &lt;- distill(genome_annotations_pm,GIFT_db,genomecol=2,annotcol=c(9,10,19), verbosity=F) 2.3.0.11 Prepare color scheme AlberdiLab projects use unified color schemes developed for the Earth Hologenome Initiative, to facilitate figure interpretation. phylum_colors_pm &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata_pm, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree_pm$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% pull(colors, name=phylum) 2.3.0.12 Wrap working objects All working objects are wrapped into a single Rdata object to facilitate downstream usage. save(sample_metadata_pm, genome_metadata_pm, read_counts_pm, genome_counts_pm, genome_counts_filt_pm, genome_tree_pm, genome_gifts_pm, phylum_colors_pm, file = &quot;data/data_podarcis_milensis.Rdata&quot;) 2.4 Podarcis pityusensis (PP) 2.4.0.1 Sample metadata sample_metadata_pp &lt;- read_tsv(&quot;data/pp/DMB0161_metadata.tsv.gz&quot;) %&gt;% rename(sample=1) 2.4.0.2 Genome metadata genome_metadata_pp &lt;- read_tsv(&quot;data/pp/DMB0161_mag_info.tsv.gz&quot;) %&gt;% rename(length=mag_size) 2.4.0.3 Read counts read_counts_pp &lt;- read_tsv(&quot;data/pp/DMB0161_counts.tsv.gz&quot;) %&gt;% rename(genome=1) %&gt;% select(all_of(c(&quot;genome&quot;,sample_metadata_pp$sample))) %&gt;% # sort samples arrange(match(genome,genome_metadata_pp$genome)) # sort genomes 2.4.0.4 Genome base hits genome_coverage_pp &lt;- read_tsv(&quot;data/pp/DMB0161_coverage.tsv.gz&quot;) %&gt;% rename(genome=1) %&gt;% select(all_of(c(&quot;genome&quot;,sample_metadata_pp$sample))) %&gt;% # sort samples arrange(match(genome,genome_metadata_pp$genome)) # sort genomes 2.4.0.5 Genome tree genome_tree_pp &lt;- read_tree(&quot;data/pp/DMB0161.tree&quot;) genome_tree_pp$tip.label &lt;- str_replace_all(genome_tree_pp$tip.label,&quot;&#39;&quot;, &quot;&quot;) #remove single quotes in MAG names genome_tree_pp &lt;- keep.tip(genome_tree_pp, tip=genome_metadata_pp$genome) # keep only MAG tips 2.4.0.6 Genome annotations Downloading individual annotation files from ERDA using information in Airtable and writing them to a single compressed table takes a while. The following chunk only needs to be run once, to generate the genome_annotations table that is saved in the data directory. Note that the airtable connection requires a personal access token. airtable(&quot;MAGs&quot;, &quot;appWbHBNLE6iAsMRV&quot;) %&gt;% #get base ID from Airtable browser URL read_airtable(., fields = c(&quot;ID&quot;,&quot;mag_name&quot;,&quot;number_genes&quot;,&quot;anno_url&quot;), id_to_col = TRUE) %&gt;% #get 3 columns from MAGs table filter(mag_name %in% paste0(genome_metadata_pp$genome,&quot;.fa&quot;)) %&gt;% #filter by MAG name filter(number_genes &gt; 0) %&gt;% #genes need to exist select(anno_url) %&gt;% #list MAG annotation urls pull() %&gt;% read_tsv() %&gt;% #load all tables rename(gene=1, genome=2, contig=3) %&gt;% #rename first 3 columns write_tsv(file=&quot;data/pp/genome_annotations.tsv.xz&quot;) #write to overall compressed file genome_annotations_pp &lt;- read_tsv(&quot;data/pp/genome_annotations.tsv.xz&quot;) %&gt;% rename(gene=1, genome=2, contig=3) 2.4.0.7 Create working objects Transform the original data files into working objects for downstream analyses. 2.4.0.8 Filter reads by coverage min_coverage=0.3 read_counts_filt_pp &lt;- genome_coverage_pp %&gt;% mutate(across(where(is.numeric), ~ ifelse(. &gt; min_coverage, 1, 0))) %&gt;% mutate(across(-1, ~ . * read_counts_pp[[cur_column()]])) 2.4.0.9 Transform reads into genome counts readlength=150 genome_counts_pp &lt;- read_counts_pp %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata_pp$length / readlength) )) readlength=150 genome_counts_filt_pp &lt;- read_counts_filt_pp %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata_pp$length / readlength) )) 2.4.0.10 Distill annotations into GIFTs genome_gifts_pp &lt;- distill(genome_annotations_pp,GIFT_db,genomecol=2,annotcol=c(9,10,19), verbosity=F) 2.4.0.11 Prepare color scheme AlberdiLab projects use unified color schemes developed for the Earth Hologenome Initiative, to facilitate figure interpretation. phylum_colors_pp &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata_pp, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree_pp$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% pull(colors, name=phylum) 2.4.0.12 Wrap working objects All working objects are wrapped into a single Rdata object to facilitate downstream usage. save(sample_metadata_pp, genome_metadata_pp, read_counts_pp, genome_counts_pp, genome_counts_filt_pp, genome_tree_pp, genome_gifts_pp, phylum_colors_pp, file = &quot;data/data_podarcis_pityusensis.Rdata&quot;) 2.5 All 2.5.0.1 Sample metadata sample_metadata_all &lt;- read_tsv(&quot;data/all/DMB0162_metadata.tsv.gz&quot;) %&gt;% rename(sample=1) %&gt;% mutate( population = case_when( species == &quot;Podarcis filfolensis&quot; ~ str_replace(population,&quot;_&quot;,&quot;_pf_&quot;), species == &quot;Podarcis gaigeae&quot; ~ str_replace(population,&quot;_&quot;,&quot;_pg_&quot;), species == &quot;Podarcis milensis&quot; ~ str_replace(population,&quot;_&quot;,&quot;_pm_&quot;), species == &quot;Podarcis pityusensis&quot; ~ str_replace(population,&quot;_&quot;,&quot;_pp_&quot;), TRUE ~ NA)) 2.5.0.2 Genome metadata genome_metadata_all &lt;- read_tsv(&quot;data/all/DMB0162_mag_info.tsv.gz&quot;) %&gt;% rename(length=mag_size) 2.5.0.3 Read counts read_counts_all &lt;- read_tsv(&quot;data/all/DMB0162_counts.tsv.gz&quot;) %&gt;% rename(genome=1) %&gt;% select(all_of(c(&quot;genome&quot;,sample_metadata_all$sample))) %&gt;% # sort samples arrange(match(genome,genome_metadata_all$genome)) # sort genomes 2.5.0.4 Genome base hits genome_coverage_all &lt;- read_tsv(&quot;data/all/DMB0162_coverage.tsv.gz&quot;) %&gt;% rename(genome=1) %&gt;% select(all_of(c(&quot;genome&quot;,sample_metadata_all$sample))) %&gt;% # sort samples arrange(match(genome,genome_metadata_all$genome)) # sort genomes 2.5.0.5 Genome tree genome_tree_all &lt;- read_tree(&quot;data/all/DMB0162.tree&quot;) genome_tree_all$tip.label &lt;- str_replace_all(genome_tree_all$tip.label,&quot;&#39;&quot;, &quot;&quot;) #remove single quotes in MAG names genome_tree_all &lt;- keep.tip(genome_tree_all, tip=genome_metadata_all$genome) # keep only MAG tips 2.5.0.6 Genome annotations genome_annotations_all &lt;- read_tsv(c(&quot;data/pf/genome_annotations.tsv.xz&quot;, &quot;data/pg/genome_annotations.tsv.xz&quot;, &quot;data/pm/genome_annotations.tsv.xz&quot;, &quot;data/pp/genome_annotations.tsv.xz&quot;)) %&gt;% rename(gene=1, genome=2, contig=3) 2.5.0.7 Create working objects Transform the original data files into working objects for downstream analyses. 2.5.0.8 Filter reads by coverage min_coverage=0.3 read_counts_filt_all &lt;- genome_coverage_all %&gt;% mutate(across(where(is.numeric), ~ ifelse(. &gt; min_coverage, 1, 0))) %&gt;% mutate(across(-1, ~ . * read_counts_all[[cur_column()]])) 2.5.0.9 Transform reads into genome counts readlength=150 genome_counts_all &lt;- read_counts_all %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata_all$length / readlength) )) readlength=150 genome_counts_filt_all &lt;- read_counts_filt_all %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata_all$length / readlength) )) 2.5.0.10 Distill annotations into GIFTs genome_gifts_all &lt;- distill(genome_annotations_all,GIFT_db,genomecol=2,annotcol=c(9,10,19), verbosity=F) 2.5.0.11 Prepare color scheme AlberdiLab projects use unified color schemes developed for the Earth Hologenome Initiative, to facilitate figure interpretation. phylum_colors_all &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata_all, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree_all$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% pull(colors, name=phylum) 2.5.0.12 Wrap working objects All working objects are wrapped into a single Rdata object to facilitate downstream usage. save(sample_metadata_all, genome_metadata_all, read_counts_all, genome_counts_all, genome_counts_filt_all, genome_tree_all, genome_gifts_all, phylum_colors_all, file = &quot;data/data_podarcis_all.Rdata&quot;) "],["data-statistics.html", "Chapter 3 Data statistics 3.1 Sequencing reads statistics 3.2 DNA fractions 3.3 Recovered microbial fraction", " Chapter 3 Data statistics load(&quot;data/data_podarcis_filfolensis.Rdata&quot;) load(&quot;data/data_podarcis_gaigeae.Rdata&quot;) load(&quot;data/data_podarcis_milensis.Rdata&quot;) load(&quot;data/data_podarcis_pityusensis.Rdata&quot;) load(&quot;data/data_podarcis_all.Rdata&quot;) 3.1 Sequencing reads statistics bind_rows(list(sample_metadata_pf,sample_metadata_pg,sample_metadata_pm,sample_metadata_pp)) %&gt;% group_by(species) %&gt;% summarise(Individuals=n(), Populations=n_distinct(region), Total=sum(reads_post_fastp * 150 / 1000000000) %&gt;% round(2), mean=mean(reads_post_fastp * 150 / 1000000000) %&gt;% round(2), sd=sd(reads_post_fastp * 150 / 1000000000) %&gt;% round(2)) %&gt;% unite(&quot;Average&quot;,mean, sd, sep = &quot; ± &quot;, remove = TRUE) %&gt;% tt() tinytable_0j47o6jf9zi2k7omy7vo .table td.tinytable_css_c9lmlevz2410e7pap4h1, .table th.tinytable_css_c9lmlevz2410e7pap4h1 { border-bottom: solid 0.1em #d3d8dc; } species Individuals Populations Total Average Podarcis filfolensis 41 9 168.59 4.11 ± 1.89 Podarcis gaigeae 61 15 292.33 4.79 ± 2.33 Podarcis milensis 26 8 144.23 5.55 ± 1.92 Podarcis pityusensis 44 7 212.29 4.82 ± 1.88 3.2 DNA fractions sequence_fractions_pf &lt;- read_counts_pf %&gt;% pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;value&quot;) %&gt;% group_by(sample) %&gt;% summarise(mags = sum(value)) %&gt;% left_join(sample_metadata_pf, by = join_by(sample == sample)) %&gt;% select(sample,mags,metagenomic_bases,host_bases,bases_lost_fastp_percent, singlem_fraction) %&gt;% mutate(mags_bases = mags*146) %&gt;% mutate(lowqual_bases = ((metagenomic_bases+host_bases)/(1-bases_lost_fastp_percent))-(metagenomic_bases+host_bases)) %&gt;% mutate(unmapped_bases = metagenomic_bases - mags_bases) %&gt;% mutate(unmapped_bases = ifelse(unmapped_bases &lt; 0, 0, unmapped_bases)) %&gt;% select(sample, lowqual_bases, host_bases, unmapped_bases, mags_bases, singlem_fraction) %&gt;% mutate(host_species=&quot;Podarcis filfolensis&quot;) sequence_fractions_pg &lt;- read_counts_pg %&gt;% pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;value&quot;) %&gt;% group_by(sample) %&gt;% summarise(mags = sum(value)) %&gt;% left_join(sample_metadata_pg, by = join_by(sample == sample)) %&gt;% select(sample,mags,metagenomic_bases,host_bases,bases_lost_fastp_percent, singlem_fraction) %&gt;% mutate(mags_bases = mags*146) %&gt;% mutate(lowqual_bases = ((metagenomic_bases+host_bases)/(1-bases_lost_fastp_percent))-(metagenomic_bases+host_bases)) %&gt;% mutate(unmapped_bases = metagenomic_bases - mags_bases) %&gt;% mutate(unmapped_bases = ifelse(unmapped_bases &lt; 0, 0, unmapped_bases)) %&gt;% select(sample, lowqual_bases, host_bases, unmapped_bases, mags_bases, singlem_fraction) %&gt;% mutate(host_species=&quot;Podarcis geigae&quot;) sequence_fractions_pm &lt;- read_counts_pm %&gt;% pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;value&quot;) %&gt;% group_by(sample) %&gt;% summarise(mags = sum(value)) %&gt;% left_join(sample_metadata_pm, by = join_by(sample == sample)) %&gt;% select(sample,mags,metagenomic_bases,host_bases,bases_lost_fastp_percent, singlem_fraction) %&gt;% mutate(mags_bases = mags*146) %&gt;% mutate(lowqual_bases = ((metagenomic_bases+host_bases)/(1-bases_lost_fastp_percent))-(metagenomic_bases+host_bases)) %&gt;% mutate(unmapped_bases = metagenomic_bases - mags_bases) %&gt;% mutate(unmapped_bases = ifelse(unmapped_bases &lt; 0, 0, unmapped_bases)) %&gt;% select(sample, lowqual_bases, host_bases, unmapped_bases, mags_bases, singlem_fraction) %&gt;% mutate(host_species=&quot;Podarcis milensis&quot;) sequence_fractions_pp &lt;- read_counts_pp %&gt;% pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;value&quot;) %&gt;% group_by(sample) %&gt;% summarise(mags = sum(value)) %&gt;% left_join(sample_metadata_pp, by = join_by(sample == sample)) %&gt;% select(sample,mags,metagenomic_bases,host_bases,bases_lost_fastp_percent, singlem_fraction) %&gt;% mutate(mags_bases = mags*146) %&gt;% mutate(lowqual_bases = ((metagenomic_bases+host_bases)/(1-bases_lost_fastp_percent))-(metagenomic_bases+host_bases)) %&gt;% mutate(unmapped_bases = metagenomic_bases - mags_bases) %&gt;% mutate(unmapped_bases = ifelse(unmapped_bases &lt; 0, 0, unmapped_bases)) %&gt;% select(sample, lowqual_bases, host_bases, unmapped_bases, mags_bases, singlem_fraction) %&gt;% mutate(host_species=&quot;Podarcis pityusensis&quot;) sequence_fractions &lt;- bind_rows(sequence_fractions_pf,sequence_fractions_pg,sequence_fractions_pm,sequence_fractions_pp) sequence_fractions %&gt;% select(-singlem_fraction) %&gt;% pivot_longer(!c(sample,host_species), names_to = &quot;fraction&quot;, values_to = &quot;value&quot;) %&gt;% mutate(value = value / 1000000000) %&gt;% mutate(fraction = factor(fraction, levels = c(&quot;lowqual_bases&quot;,&quot;host_bases&quot;,&quot;unmapped_bases&quot;,&quot;mags_bases&quot;))) %&gt;% ggplot(., aes(x = sample, y = value, fill=fraction)) + geom_bar(position=&quot;stack&quot;, stat = &quot;identity&quot;) + scale_fill_manual(name=&quot;Sequence type&quot;, breaks=c(&quot;lowqual_bases&quot;,&quot;host_bases&quot;,&quot;unmapped_bases&quot;,&quot;mags_bases&quot;), labels=c(&quot;Low quality&quot;,&quot;Mapped to host&quot;,&quot;Unmapped&quot;,&quot;Mapped to MAGs&quot;), values=c(&quot;#CCCCCC&quot;, &quot;#bcdee1&quot;, &quot;#d8b8a3&quot;,&quot;#93655c&quot;))+ facet_wrap(~host_species, scales=&quot;free&quot;)+ labs(x = &quot;Samples&quot;, y = &quot;Amount of data (GB)&quot;) + theme_classic() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size=6),legend.position = &quot;bottom&quot;) 3.3 Recovered microbial fraction 3.3.1 Per species DAMR visualisation based on individual MAG dereplications per species. singlem_table &lt;- sequence_fractions %&gt;% mutate(mags_proportion = round((mags_bases / (mags_bases + unmapped_bases))*100,2)) %&gt;% mutate(singlem_proportion = round(singlem_fraction*100,2)) %&gt;% select(sample,mags_proportion,singlem_proportion,host_species) %&gt;% mutate(mags_proportion = ifelse(singlem_proportion == 0, 0, mags_proportion)) %&gt;% #convert zeros to NA mutate(singlem_proportion = ifelse(singlem_proportion == 0, NA, singlem_proportion)) %&gt;% #convert zeros to NA mutate(singlem_proportion = ifelse(singlem_proportion &lt; mags_proportion, NA, singlem_proportion)) %&gt;% #if singlem is smaller, then NA, to simplify plot mutate(singlem_proportion = ifelse(singlem_proportion &gt; 100, 100, singlem_proportion)) #simplify singlem_table %&gt;% pivot_longer(!c(sample,host_species), names_to = &quot;proportion&quot;, values_to = &quot;value&quot;) %&gt;% mutate(proportion = factor(proportion, levels = c(&quot;mags_proportion&quot;,&quot;singlem_proportion&quot;))) %&gt;% ggplot(., aes(x = value, y = sample, color=proportion)) + geom_line(aes(group = sample), color = &quot;#f8a538&quot;) + geom_point() + scale_color_manual(name=&quot;Proportion&quot;, breaks=c(&quot;mags_proportion&quot;,&quot;singlem_proportion&quot;), labels=c(&quot;Recovered&quot;,&quot;Estimated&quot;), values=c(&quot;#52e1e8&quot;, &quot;#876b53&quot;))+ facet_nested(host_species ~ ., scales=&quot;free&quot;,space=&quot;free&quot;)+ theme_classic() + labs(y = &quot;Samples&quot;, x = &quot;Prokaryotic fraction (%)&quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size=6), legend.position = &quot;right&quot;, strip.background.y=element_rect(color = NA, fill= &quot;#f4f4f4&quot;)) ### All DAMR visualisation after dereplicating MAGs from all 4 species. sequence_fractions_all&lt;- read_counts_all %&gt;% pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;value&quot;) %&gt;% group_by(sample) %&gt;% summarise(mags = sum(value)) %&gt;% left_join(sample_metadata_all, by = join_by(sample == sample)) %&gt;% select(sample,mags,metagenomic_bases,host_bases,bases_lost_fastp_percent, singlem_fraction) %&gt;% mutate(mags_bases = mags*146) %&gt;% mutate(lowqual_bases = ((metagenomic_bases+host_bases)/(1-bases_lost_fastp_percent))-(metagenomic_bases+host_bases)) %&gt;% mutate(unmapped_bases = metagenomic_bases - mags_bases) %&gt;% mutate(unmapped_bases = ifelse(unmapped_bases &lt; 0, 0, unmapped_bases)) %&gt;% select(sample, lowqual_bases, host_bases, unmapped_bases, mags_bases, singlem_fraction) singlem_table &lt;- sequence_fractions_all %&gt;% mutate(mags_proportion = round((mags_bases / (mags_bases + unmapped_bases))*100,2)) %&gt;% mutate(singlem_proportion = round(singlem_fraction,2)) %&gt;% select(sample,mags_proportion,singlem_proportion) %&gt;% mutate(mags_proportion = ifelse(singlem_proportion == 0, 0, mags_proportion)) %&gt;% #convert zeros to NA mutate(singlem_proportion = ifelse(singlem_proportion == 0, NA, singlem_proportion)) %&gt;% #convert zeros to NA mutate(singlem_proportion = ifelse(singlem_proportion &lt; mags_proportion, NA, singlem_proportion)) %&gt;% #if singlem is smaller, then NA, to simplify plot mutate(singlem_proportion = ifelse(singlem_proportion &gt; 100, 100, singlem_proportion)) #simplify singlem_table %&gt;% pivot_longer(!c(sample), names_to = &quot;proportion&quot;, values_to = &quot;value&quot;) %&gt;% mutate(proportion = factor(proportion, levels = c(&quot;mags_proportion&quot;,&quot;singlem_proportion&quot;))) %&gt;% ggplot(., aes(x = value, y = sample, color=proportion)) + geom_line(aes(group = sample), color = &quot;#f8a538&quot;) + geom_point() + scale_color_manual(name=&quot;Proportion&quot;, breaks=c(&quot;mags_proportion&quot;,&quot;singlem_proportion&quot;), labels=c(&quot;Recovered&quot;,&quot;Estimated&quot;), values=c(&quot;#52e1e8&quot;, &quot;#876b53&quot;))+ theme_classic() + labs(y = &quot;Samples&quot;, x = &quot;Prokaryotic fraction (%)&quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size=6), legend.position = &quot;right&quot;, strip.background.y=element_rect(color = NA, fill= &quot;#f4f4f4&quot;)) "],["mag-catalogue.html", "Chapter 4 MAG catalogue 4.1 Genome phylogeny 4.2 Genome quality 4.3 Functional overview", " Chapter 4 MAG catalogue load(&quot;data/data_podarcis_filfolensis.Rdata&quot;) load(&quot;data/data_podarcis_gaigeae.Rdata&quot;) load(&quot;data/data_podarcis_milensis.Rdata&quot;) load(&quot;data/data_podarcis_pityusensis.Rdata&quot;) 4.1 Genome phylogeny 4.1.1 Podarcis filfolensis # Generate the phylum color heatmap phylum_heatmap &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata_pf, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree_pf$tip.label)) %&gt;% select(genome,phylum) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) # Generate basal tree circular_tree &lt;- force.ultrametric(genome_tree_pf, method=&quot;extend&quot;) %&gt;% # extend to ultrametric for the sake of visualisation ggtree(., layout=&quot;fan&quot;, open.angle=10, size=0.5) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum ring circular_tree &lt;- gheatmap(circular_tree, phylum_heatmap, offset=0.55, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors_pf) + geom_tiplab2(size=1, hjust=-0.1) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) # Flush color scale to enable a new color scheme in the next ring circular_tree &lt;- circular_tree + new_scale_fill() # Add completeness ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_gradient(low = &quot;#d1f4ba&quot;, high = &quot;#f4baba&quot;) + geom_fruit( data=genome_metadata_pf, geom=geom_bar, mapping = aes(x=completeness, y=genome, fill=contamination), offset = 0.55, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add genome-size ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_manual(values = &quot;#cccccc&quot;) + geom_fruit( data=genome_metadata_pf, geom=geom_bar, mapping = aes(x=length, y=genome), offset = 0.05, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add text circular_tree &lt;- circular_tree + annotate(&#39;text&#39;, x=2.7, y=0, label=&#39; Phylum&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.1, y=0, label=&#39; Genome quality&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.5, y=0, label=&#39; Genome size&#39;, family=&#39;arial&#39;, size=3.5) #Plot circular tree circular_tree %&gt;% open_tree(30) %&gt;% rotate_tree(90) ### Podarcis geigae # Generate the phylum color heatmap phylum_heatmap &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata_pg, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree_pg$tip.label)) %&gt;% select(genome,phylum) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) # Generate basal tree circular_tree &lt;- force.ultrametric(genome_tree_pg, method=&quot;extend&quot;) %&gt;% # extend to ultrametric for the sake of visualisation ggtree(., layout=&quot;fan&quot;, open.angle=10, size=0.5) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum ring circular_tree &lt;- gheatmap(circular_tree, phylum_heatmap, offset=0.55, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors_pg) + geom_tiplab2(size=1, hjust=-0.1) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) # Flush color scale to enable a new color scheme in the next ring circular_tree &lt;- circular_tree + new_scale_fill() # Add completeness ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_gradient(low = &quot;#d1f4ba&quot;, high = &quot;#f4baba&quot;) + geom_fruit( data=genome_metadata_pg, geom=geom_bar, mapping = aes(x=completeness, y=genome, fill=contamination), offset = 0.55, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add genome-size ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_manual(values = &quot;#cccccc&quot;) + geom_fruit( data=genome_metadata_pg, geom=geom_bar, mapping = aes(x=length, y=genome), offset = 0.05, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add text circular_tree &lt;- circular_tree + annotate(&#39;text&#39;, x=2.7, y=0, label=&#39; Phylum&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.1, y=0, label=&#39; Genome quality&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.5, y=0, label=&#39; Genome size&#39;, family=&#39;arial&#39;, size=3.5) #Plot circular tree circular_tree %&gt;% open_tree(30) %&gt;% rotate_tree(90) 4.1.2 Podarcis milensis # Generate the phylum color heatmap phylum_heatmap &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata_pm, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree_pm$tip.label)) %&gt;% select(genome,phylum) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) # Generate basal tree circular_tree &lt;- force.ultrametric(genome_tree_pm, method=&quot;extend&quot;) %&gt;% # extend to ultrametric for the sake of visualisation ggtree(., layout=&quot;fan&quot;, open.angle=10, size=0.5) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum ring circular_tree &lt;- gheatmap(circular_tree, phylum_heatmap, offset=0.55, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors_pm) + geom_tiplab2(size=1, hjust=-0.1) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) # Flush color scale to enable a new color scheme in the next ring circular_tree &lt;- circular_tree + new_scale_fill() # Add completeness ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_gradient(low = &quot;#d1f4ba&quot;, high = &quot;#f4baba&quot;) + geom_fruit( data=genome_metadata_pm, geom=geom_bar, mapping = aes(x=completeness, y=genome, fill=contamination), offset = 0.55, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add genome-size ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_manual(values = &quot;#cccccc&quot;) + geom_fruit( data=genome_metadata_pm, geom=geom_bar, mapping = aes(x=length, y=genome), offset = 0.05, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add text circular_tree &lt;- circular_tree + annotate(&#39;text&#39;, x=2.7, y=0, label=&#39; Phylum&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.1, y=0, label=&#39; Genome quality&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.5, y=0, label=&#39; Genome size&#39;, family=&#39;arial&#39;, size=3.5) #Plot circular tree circular_tree %&gt;% open_tree(30) %&gt;% rotate_tree(90) 4.1.3 Podarcis pityusensis # Generate the phylum color heatmap phylum_heatmap &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata_pp, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree_pp$tip.label)) %&gt;% select(genome,phylum) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) # Generate basal tree circular_tree &lt;- force.ultrametric(genome_tree_pp, method=&quot;extend&quot;) %&gt;% # extend to ultrametric for the sake of visualisation ggtree(., layout=&quot;fan&quot;, open.angle=10, size=0.5) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum ring circular_tree &lt;- gheatmap(circular_tree, phylum_heatmap, offset=0.55, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors_pp) + geom_tiplab2(size=1, hjust=-0.1) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) # Flush color scale to enable a new color scheme in the next ring circular_tree &lt;- circular_tree + new_scale_fill() # Add completeness ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_gradient(low = &quot;#d1f4ba&quot;, high = &quot;#f4baba&quot;) + geom_fruit( data=genome_metadata_pp, geom=geom_bar, mapping = aes(x=completeness, y=genome, fill=contamination), offset = 0.55, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add genome-size ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_manual(values = &quot;#cccccc&quot;) + geom_fruit( data=genome_metadata_pp, geom=geom_bar, mapping = aes(x=length, y=genome), offset = 0.05, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add text circular_tree &lt;- circular_tree + annotate(&#39;text&#39;, x=2.7, y=0, label=&#39; Phylum&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.1, y=0, label=&#39; Genome quality&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.5, y=0, label=&#39; Genome size&#39;, family=&#39;arial&#39;, size=3.5) #Plot circular tree circular_tree %&gt;% open_tree(30) %&gt;% rotate_tree(90) 4.2 Genome quality bind_rows(list(genome_metadata_pf %&gt;% mutate(host_species=&quot;Podarcis filfolensis&quot;), genome_metadata_pg %&gt;% mutate(host_species=&quot;Podarcis geigae&quot;), genome_metadata_pm %&gt;% mutate(host_species=&quot;Podarcis milensis&quot;), genome_metadata_pp %&gt;% mutate(host_species=&quot;Podarcis pityusensis&quot;))) %&gt;% group_by(host_species) %&gt;% summarise(completeness_mean=mean(completeness) %&gt;% round(2) %&gt;% as.character(), completeness_sd=sd(completeness) %&gt;% round(2) %&gt;% as.character(), contamination_mean=mean(contamination) %&gt;% round(2), contamination_sd=sd(contamination) %&gt;% round(2)) %&gt;% unite(&quot;Completeness&quot;,completeness_mean, completeness_sd, sep = &quot; ± &quot;, remove = TRUE) %&gt;% unite(&quot;Contamination&quot;,contamination_mean, contamination_sd, sep = &quot; ± &quot;, remove = TRUE) %&gt;% tt() tinytable_vvt6asxovaiuyfglx9ag .table td.tinytable_css_n2h4bdb1sl3luftuplcv, .table th.tinytable_css_n2h4bdb1sl3luftuplcv { border-bottom: solid 0.1em #d3d8dc; } host_species Completeness Contamination Podarcis filfolensis 82.75 ± 16.25 1.89 ± 2.1 Podarcis geigae 82.93 ± 15.99 1.99 ± 2.22 Podarcis milensis 81.27 ± 16.43 2.05 ± 2.25 Podarcis pityusensis 85.86 ± 14.69 1.7 ± 1.99 4.2.1 Podarcis filfolensis #Generate quality biplot genome_biplot &lt;- genome_metadata_pf %&gt;% select(c(genome,domain,phylum,completeness,contamination,length)) %&gt;% arrange(match(genome, rev(genome_tree_pf$tip.label))) %&gt;% #sort MAGs according to phylogenetic tree ggplot(aes(x=completeness,y=contamination,size=length,color=phylum)) + geom_point(alpha=0.7) + ylim(c(10,0)) + scale_color_manual(values=phylum_colors_pf) + labs(y= &quot;Contamination&quot;, x = &quot;Completeness&quot;) + theme_classic() + theme(legend.position = &quot;none&quot;) #Generate contamination boxplot genome_contamination &lt;- genome_metadata_pf %&gt;% ggplot(aes(y=contamination)) + ylim(c(10,0)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0.40, 0),&quot;inches&quot;)) #add bottom-margin (top, right, bottom, left) #Generate completeness boxplot genome_completeness &lt;- genome_metadata_pf %&gt;% ggplot(aes(x=completeness)) + xlim(c(50,100)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0, 0.50),&quot;inches&quot;)) #add left-margin (top, right, bottom, left) #Render composite figure grid.arrange(grobs = list(genome_completeness,genome_biplot,genome_contamination), layout_matrix = rbind(c(1,1,1,1,1,1,1,1,1,1,1,4), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3))) 4.2.2 Podarcis geigae #Generate quality biplot genome_biplot &lt;- genome_metadata_pg %&gt;% select(c(genome,domain,phylum,completeness,contamination,length)) %&gt;% arrange(match(genome, rev(genome_tree_pg$tip.label))) %&gt;% #sort MAGs according to phylogenetic tree ggplot(aes(x=completeness,y=contamination,size=length,color=phylum)) + geom_point(alpha=0.7) + ylim(c(10,0)) + scale_color_manual(values=phylum_colors_pg) + labs(y= &quot;Contamination&quot;, x = &quot;Completeness&quot;) + theme_classic() + theme(legend.position = &quot;none&quot;) #Generate contamination boxplot genome_contamination &lt;- genome_metadata_pg %&gt;% ggplot(aes(y=contamination)) + ylim(c(10,0)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0.40, 0),&quot;inches&quot;)) #add bottom-margin (top, right, bottom, left) #Generate completeness boxplot genome_completeness &lt;- genome_metadata_pg %&gt;% ggplot(aes(x=completeness)) + xlim(c(50,100)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0, 0.50),&quot;inches&quot;)) #add left-margin (top, right, bottom, left) #Render composite figure grid.arrange(grobs = list(genome_completeness,genome_biplot,genome_contamination), layout_matrix = rbind(c(1,1,1,1,1,1,1,1,1,1,1,4), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3))) 4.2.3 Podarcis milensis #Generate quality biplot genome_biplot &lt;- genome_metadata_pm %&gt;% select(c(genome,domain,phylum,completeness,contamination,length)) %&gt;% arrange(match(genome, rev(genome_tree_pm$tip.label))) %&gt;% #sort MAGs according to phylogenetic tree ggplot(aes(x=completeness,y=contamination,size=length,color=phylum)) + geom_point(alpha=0.7) + ylim(c(10,0)) + scale_color_manual(values=phylum_colors_pm) + labs(y= &quot;Contamination&quot;, x = &quot;Completeness&quot;) + theme_classic() + theme(legend.position = &quot;none&quot;) #Generate contamination boxplot genome_contamination &lt;- genome_metadata_pm %&gt;% ggplot(aes(y=contamination)) + ylim(c(10,0)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0.40, 0),&quot;inches&quot;)) #add bottom-margin (top, right, bottom, left) #Generate completeness boxplot genome_completeness &lt;- genome_metadata_pm %&gt;% ggplot(aes(x=completeness)) + xlim(c(50,100)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0, 0.50),&quot;inches&quot;)) #add left-margin (top, right, bottom, left) #Render composite figure grid.arrange(grobs = list(genome_completeness,genome_biplot,genome_contamination), layout_matrix = rbind(c(1,1,1,1,1,1,1,1,1,1,1,4), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3))) 4.2.4 Podarcis pityusensis #Generate quality biplot genome_biplot &lt;- genome_metadata_pp %&gt;% select(c(genome,domain,phylum,completeness,contamination,length)) %&gt;% arrange(match(genome, rev(genome_tree_pp$tip.label))) %&gt;% #sort MAGs according to phylogenetic tree ggplot(aes(x=completeness,y=contamination,size=length,color=phylum)) + geom_point(alpha=0.7) + ylim(c(10,0)) + scale_color_manual(values=phylum_colors_pp) + labs(y= &quot;Contamination&quot;, x = &quot;Completeness&quot;) + theme_classic() + theme(legend.position = &quot;none&quot;) #Generate contamination boxplot genome_contamination &lt;- genome_metadata_pp %&gt;% ggplot(aes(y=contamination)) + ylim(c(10,0)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0.40, 0),&quot;inches&quot;)) #add bottom-margin (top, right, bottom, left) #Generate completeness boxplot genome_completeness &lt;- genome_metadata_pp %&gt;% ggplot(aes(x=completeness)) + xlim(c(50,100)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0, 0.50),&quot;inches&quot;)) #add left-margin (top, right, bottom, left) #Render composite figure grid.arrange(grobs = list(genome_completeness,genome_biplot,genome_contamination), layout_matrix = rbind(c(1,1,1,1,1,1,1,1,1,1,1,4), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3))) 4.3 Functional overview 4.3.1 Podarcis filfolensis phylum_heatmap &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata_pp, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree_pp$tip.label)) %&gt;% select(genome,phylum) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) # Aggregate basal GIFT into elements function_table &lt;- genome_gifts_pf %&gt;% to.elements(., GIFT_db) # Generate basal tree function_tree &lt;- force.ultrametric(genome_tree_pf, method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips function_tree &lt;- gheatmap(function_tree, phylum_heatmap, offset=0, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors_pf) + labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() #Add functions heatmap function_tree &lt;- gheatmap(function_tree, function_table, offset=0.5, width=3.5, colnames=FALSE) + vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;#f4f4f4&quot;, high = &quot;steelblue&quot;, na.value=&quot;white&quot;) + labs(fill=&quot;GIFT&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() # Add completeness barplots function_tree &lt;- function_tree + geom_fruit(data=genome_metadata_pf, geom=geom_bar, grid.params=list(axis=&quot;x&quot;, text.size=2, nbreak = 1), axis.params=list(vline=TRUE), mapping = aes(x=length, y=genome, fill=completeness), offset = 3.8, orientation=&quot;y&quot;, stat=&quot;identity&quot;) + scale_fill_gradient(low = &quot;#cf8888&quot;, high = &quot;#a2cc87&quot;) + labs(fill=&quot;Genome\\ncompleteness&quot;) function_tree set.seed(101) # Generate the tSNE ordination tSNE_function &lt;- Rtsne(X=function_table, dims = 2, check_duplicates = FALSE) # Plot the ordination function_ordination &lt;- tSNE_function$Y %&gt;% as.data.frame() %&gt;% mutate(genome=rownames(function_table)) %&gt;% inner_join(genome_metadata_pf, by=&quot;genome&quot;) %&gt;% rename(tSNE1=&quot;V1&quot;, tSNE2=&quot;V2&quot;) %&gt;% select(genome,phylum,tSNE1,tSNE2, length) %&gt;% ggplot(aes(x = tSNE1, y = tSNE2, color = phylum, size=length))+ geom_point(shape=16, alpha=0.7) + scale_color_manual(values=phylum_colors_pf) + theme_minimal() + labs(color=&quot;Phylum&quot;, size=&quot;Genome size&quot;) + guides(color = guide_legend(override.aes = list(size = 5))) # enlarge Phylum dots in legend function_ordination 4.3.2 Podarcis geigae phylum_heatmap &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata_pp, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree_pp$tip.label)) %&gt;% select(genome,phylum) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) # Aggregate basal GIFT into elements function_table &lt;- genome_gifts_pg %&gt;% to.elements(., GIFT_db) # Generate basal tree function_tree &lt;- force.ultrametric(genome_tree_pg, method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips function_tree &lt;- gheatmap(function_tree, phylum_heatmap, offset=0, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors_pg) + labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() #Add functions heatmap function_tree &lt;- gheatmap(function_tree, function_table, offset=0.5, width=3.5, colnames=FALSE) + vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;#f4f4f4&quot;, high = &quot;steelblue&quot;, na.value=&quot;white&quot;) + labs(fill=&quot;GIFT&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() # Add completeness barplots function_tree &lt;- function_tree + geom_fruit(data=genome_metadata_pg, geom=geom_bar, grid.params=list(axis=&quot;x&quot;, text.size=2, nbreak = 1), axis.params=list(vline=TRUE), mapping = aes(x=length, y=genome, fill=completeness), offset = 3.8, orientation=&quot;y&quot;, stat=&quot;identity&quot;) + scale_fill_gradient(low = &quot;#cf8888&quot;, high = &quot;#a2cc87&quot;) + labs(fill=&quot;Genome\\ncompleteness&quot;) function_tree set.seed(101) # Generate the tSNE ordination tSNE_function &lt;- Rtsne(X=function_table, dims = 2, check_duplicates = FALSE) # Plot the ordination function_ordination &lt;- tSNE_function$Y %&gt;% as.data.frame() %&gt;% mutate(genome=rownames(function_table)) %&gt;% inner_join(genome_metadata_pg, by=&quot;genome&quot;) %&gt;% rename(tSNE1=&quot;V1&quot;, tSNE2=&quot;V2&quot;) %&gt;% select(genome,phylum,tSNE1,tSNE2, length) %&gt;% ggplot(aes(x = tSNE1, y = tSNE2, color = phylum, size=length))+ geom_point(shape=16, alpha=0.7) + scale_color_manual(values=phylum_colors_pg) + theme_minimal() + labs(color=&quot;Phylum&quot;, size=&quot;Genome size&quot;) + guides(color = guide_legend(override.aes = list(size = 5))) # enlarge Phylum dots in legend function_ordination 4.3.3 Podarcis milensis phylum_heatmap &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata_pp, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree_pp$tip.label)) %&gt;% select(genome,phylum) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) # Aggregate basal GIFT into elements function_table &lt;- genome_gifts_pm %&gt;% to.elements(., GIFT_db) # Generate basal tree function_tree &lt;- force.ultrametric(genome_tree_pm, method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips function_tree &lt;- gheatmap(function_tree, phylum_heatmap, offset=0, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors_pm) + labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() #Add functions heatmap function_tree &lt;- gheatmap(function_tree, function_table, offset=0.5, width=3.5, colnames=FALSE) + vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;#f4f4f4&quot;, high = &quot;steelblue&quot;, na.value=&quot;white&quot;) + labs(fill=&quot;GIFT&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() # Add completeness barplots function_tree &lt;- function_tree + geom_fruit(data=genome_metadata_pm, geom=geom_bar, grid.params=list(axis=&quot;x&quot;, text.size=2, nbreak = 1), axis.params=list(vline=TRUE), mapping = aes(x=length, y=genome, fill=completeness), offset = 3.8, orientation=&quot;y&quot;, stat=&quot;identity&quot;) + scale_fill_gradient(low = &quot;#cf8888&quot;, high = &quot;#a2cc87&quot;) + labs(fill=&quot;Genome\\ncompleteness&quot;) function_tree set.seed(101) # Generate the tSNE ordination tSNE_function &lt;- Rtsne(X=function_table, dims = 2, check_duplicates = FALSE) # Plot the ordination function_ordination &lt;- tSNE_function$Y %&gt;% as.data.frame() %&gt;% mutate(genome=rownames(function_table)) %&gt;% inner_join(genome_metadata_pm, by=&quot;genome&quot;) %&gt;% rename(tSNE1=&quot;V1&quot;, tSNE2=&quot;V2&quot;) %&gt;% select(genome,phylum,tSNE1,tSNE2, length) %&gt;% ggplot(aes(x = tSNE1, y = tSNE2, color = phylum, size=length))+ geom_point(shape=16, alpha=0.7) + scale_color_manual(values=phylum_colors_pm) + theme_minimal() + labs(color=&quot;Phylum&quot;, size=&quot;Genome size&quot;) + guides(color = guide_legend(override.aes = list(size = 5))) # enlarge Phylum dots in legend function_ordination 4.3.4 Podarcis pityusensis phylum_heatmap &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata_pp, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree_pp$tip.label)) %&gt;% select(genome,phylum) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) # Aggregate basal GIFT into elements function_table &lt;- genome_gifts_pp %&gt;% to.elements(., GIFT_db) # Generate basal tree function_tree &lt;- force.ultrametric(genome_tree_pp, method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips function_tree &lt;- gheatmap(function_tree, phylum_heatmap, offset=0, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors_pp) + labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() #Add functions heatmap function_tree &lt;- gheatmap(function_tree, function_table, offset=0.5, width=3.5, colnames=FALSE) + vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;#f4f4f4&quot;, high = &quot;steelblue&quot;, na.value=&quot;white&quot;) + labs(fill=&quot;GIFT&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() # Add completeness barplots function_tree &lt;- function_tree + geom_fruit(data=genome_metadata_pp, geom=geom_bar, grid.params=list(axis=&quot;x&quot;, text.size=2, nbreak = 1), axis.params=list(vline=TRUE), mapping = aes(x=length, y=genome, fill=completeness), offset = 3.8, orientation=&quot;y&quot;, stat=&quot;identity&quot;) + scale_fill_gradient(low = &quot;#cf8888&quot;, high = &quot;#a2cc87&quot;) + labs(fill=&quot;Genome\\ncompleteness&quot;) function_tree set.seed(101) # Generate the tSNE ordination tSNE_function &lt;- Rtsne(X=function_table, dims = 2, check_duplicates = FALSE) # Plot the ordination function_ordination &lt;- tSNE_function$Y %&gt;% as.data.frame() %&gt;% mutate(genome=rownames(function_table)) %&gt;% inner_join(genome_metadata_pp, by=&quot;genome&quot;) %&gt;% rename(tSNE1=&quot;V1&quot;, tSNE2=&quot;V2&quot;) %&gt;% select(genome,phylum,tSNE1,tSNE2, length) %&gt;% ggplot(aes(x = tSNE1, y = tSNE2, color = phylum, size=length))+ geom_point(shape=16, alpha=0.7) + scale_color_manual(values=phylum_colors_pp) + theme_minimal() + labs(color=&quot;Phylum&quot;, size=&quot;Genome size&quot;) + guides(color = guide_legend(override.aes = list(size = 5))) # enlarge Phylum dots in legend function_ordination "],["alpha-diversity.html", "Chapter 5 Alpha diversity", " Chapter 5 Alpha diversity load(&quot;data/data_podarcis_all.Rdata&quot;) # Calculate Hill numbers richness &lt;- genome_counts_filt_all %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 0) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(richness = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) neutral &lt;- genome_counts_filt_all %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(neutral = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) phylogenetic &lt;- genome_counts_filt_all %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, tree = genome_tree_all) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(phylogenetic = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) # Aggregate basal GIFT into elements dist &lt;- genome_gifts_all[genome_counts_filt_all$genome[genome_counts_filt_all$genome %in% rownames(genome_gifts_all)],] %&gt;% to.elements(., GIFT_db) %&gt;% traits2dist(., method = &quot;gower&quot;) functional &lt;- genome_counts_filt_all %&gt;% filter(genome %in% colnames(dist)) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, dist = dist) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(functional = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) %&gt;% mutate(functional = if_else(is.nan(functional), 1, functional)) # Merge all metrics alpha_div &lt;- richness %&gt;% full_join(neutral, by = join_by(sample == sample)) %&gt;% full_join(phylogenetic, by = join_by(sample == sample)) %&gt;% full_join(functional, by = join_by(sample == sample)) #Richness alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(sample_metadata_all, by = join_by(sample == sample)) %&gt;% filter(metric==&quot;richness&quot;) %&gt;% ggplot(aes(y = value, x = population_type, group=population_type, color=population_type, fill=population_type)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;Population type&quot;, breaks=c(&quot;island&quot;,&quot;islet&quot;), values=c(&quot;#6A9AC3&quot;,&quot;#AFD699&quot;)) + scale_fill_manual(name=&quot;Population type&quot;, breaks=c(&quot;island&quot;,&quot;islet&quot;), values=c(&quot;#6A9AC350&quot;,&quot;#AFD69950&quot;)) + facet_wrap(. ~ species, scales = &quot;fixed&quot;, ncol=5) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) #Neutral alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(sample_metadata_all, by = join_by(sample == sample)) %&gt;% filter(metric==&quot;neutral&quot;) %&gt;% ggplot(aes(y = value, x = population_type, group=population_type, color=population_type, fill=population_type)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;Population type&quot;, breaks=c(&quot;island&quot;,&quot;islet&quot;), values=c(&quot;#6A9AC3&quot;,&quot;#AFD699&quot;)) + scale_fill_manual(name=&quot;Population type&quot;, breaks=c(&quot;island&quot;,&quot;islet&quot;), values=c(&quot;#6A9AC350&quot;,&quot;#AFD69950&quot;)) + facet_wrap(. ~ species, scales = &quot;fixed&quot;, ncol=5) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) #Phylogenetic alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(sample_metadata_all, by = join_by(sample == sample)) %&gt;% filter(metric==&quot;phylogenetic&quot;) %&gt;% ggplot(aes(y = value, x = population_type, group=population_type, color=population_type, fill=population_type)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;Population type&quot;, breaks=c(&quot;island&quot;,&quot;islet&quot;), values=c(&quot;#6A9AC3&quot;,&quot;#AFD699&quot;)) + scale_fill_manual(name=&quot;Population type&quot;, breaks=c(&quot;island&quot;,&quot;islet&quot;), values=c(&quot;#6A9AC350&quot;,&quot;#AFD69950&quot;)) + facet_wrap(. ~ species, scales = &quot;fixed&quot;, ncol=5) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) #Functional alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(sample_metadata_all, by = join_by(sample == sample)) %&gt;% filter(metric==&quot;functional&quot;) %&gt;% ggplot(aes(y = value, x = population_type, group=population_type, color=population_type, fill=population_type)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;Population type&quot;, breaks=c(&quot;island&quot;,&quot;islet&quot;), values=c(&quot;#6A9AC3&quot;,&quot;#AFD699&quot;)) + scale_fill_manual(name=&quot;Population type&quot;, breaks=c(&quot;island&quot;,&quot;islet&quot;), values=c(&quot;#6A9AC350&quot;,&quot;#AFD69950&quot;)) + facet_wrap(. ~ species, scales = &quot;fixed&quot;, ncol=5) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) "],["beta-diversity.html", "Chapter 6 Beta diversity", " Chapter 6 Beta diversity load(&quot;data/data_podarcis_all.Rdata&quot;) richness &lt;- genome_counts_filt_all %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to = &quot;counts&quot;) %&gt;% left_join(sample_metadata_all,by=&quot;sample&quot;) %&gt;% mutate(population=factor(population)) %&gt;% group_by(population) %&gt;% group_split() %&gt;% map_dbl(., ~ .x %&gt;% select(genome, sample, counts) %&gt;% pivot_wider(names_from = sample, values_from = counts) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% tss() %&gt;% as.data.frame() %&gt;% hilldiss(data=., metric=&quot;C&quot;, q = 0) ) names(richness) &lt;- unique(sample_metadata_all$population) %&gt;% sort() neutral &lt;- genome_counts_filt_all %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to = &quot;counts&quot;) %&gt;% left_join(sample_metadata_all,by=&quot;sample&quot;) %&gt;% mutate(population=factor(population)) %&gt;% group_by(population) %&gt;% group_split() %&gt;% map_dbl(., ~ .x %&gt;% select(genome, sample, counts) %&gt;% pivot_wider(names_from = sample, values_from = counts) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% tss() %&gt;% as.data.frame() %&gt;% hilldiss(data=., metric=&quot;C&quot;, q = 1) ) names(neutral) &lt;- unique(sample_metadata_all$population) %&gt;% sort() phylogenetic &lt;- genome_counts_filt_all %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to = &quot;counts&quot;) %&gt;% left_join(sample_metadata_all,by=&quot;sample&quot;) %&gt;% mutate(population=factor(population)) %&gt;% group_by(population) %&gt;% group_split() %&gt;% map_dbl(., ~ .x %&gt;% select(genome, sample, counts) %&gt;% pivot_wider(names_from = sample, values_from = counts) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% tss() %&gt;% as.data.frame() %&gt;% hilldiss(data=., metric=&quot;C&quot;, tree=genome_tree_all, q = 1) ) names(phylogenetic) &lt;- unique(sample_metadata_all$population) %&gt;% sort() # Merge all metrics beta_div &lt;- bind_rows(richness,neutral,phylogenetic) %&gt;% t() %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;population&quot;) %&gt;% as_tibble() %&gt;% rename(&quot;richness&quot;=V1,&quot;neutral&quot;=V2,&quot;phylogenetic&quot;=V3) #Richness beta_div %&gt;% left_join(sample_metadata_all %&gt;% select(species,population,population_type) %&gt;% unique, by = &quot;population&quot;) %&gt;% ggplot(aes(y = richness, x = population_type, group=population_type, color=population_type, fill=population_type)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;Population type&quot;, breaks=c(&quot;island&quot;,&quot;islet&quot;), values=c(&quot;#6A9AC3&quot;,&quot;#AFD699&quot;)) + scale_fill_manual(name=&quot;Population type&quot;, breaks=c(&quot;island&quot;,&quot;islet&quot;), values=c(&quot;#6A9AC350&quot;,&quot;#AFD69950&quot;)) + facet_wrap(. ~ species, scales = &quot;fixed&quot;, ncol=5) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) #Neutral beta_div %&gt;% left_join(sample_metadata_all %&gt;% select(species,population,population_type) %&gt;% unique, by = &quot;population&quot;) %&gt;% ggplot(aes(y = neutral, x = population_type, group=population_type, color=population_type, fill=population_type)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;Population type&quot;, breaks=c(&quot;island&quot;,&quot;islet&quot;), values=c(&quot;#6A9AC3&quot;,&quot;#AFD699&quot;)) + scale_fill_manual(name=&quot;Population type&quot;, breaks=c(&quot;island&quot;,&quot;islet&quot;), values=c(&quot;#6A9AC350&quot;,&quot;#AFD69950&quot;)) + facet_wrap(. ~ species, scales = &quot;fixed&quot;, ncol=5) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) #Phylogenetic beta_div %&gt;% left_join(sample_metadata_all %&gt;% select(species,population,population_type) %&gt;% unique, by = &quot;population&quot;) %&gt;% ggplot(aes(y = phylogenetic, x = population_type, group=population_type, color=population_type, fill=population_type)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;Population type&quot;, breaks=c(&quot;island&quot;,&quot;islet&quot;), values=c(&quot;#6A9AC3&quot;,&quot;#AFD699&quot;)) + scale_fill_manual(name=&quot;Population type&quot;, breaks=c(&quot;island&quot;,&quot;islet&quot;), values=c(&quot;#6A9AC350&quot;,&quot;#AFD69950&quot;)) + facet_wrap(. ~ species, scales = &quot;fixed&quot;, ncol=5) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
